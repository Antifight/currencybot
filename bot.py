import telebot
import requests
import json
import os
import math
from config import TOKEN

bot = telebot.TeleBot(TOKEN)
CURRENCY_API_URL = 'https://api.exchangerate-api.com/v4/latest/'

CURRENCIES = ['USD', 'EUR', 'UAH']
EMOJI = {'USD': 'üá∫üá∏', 'EUR': 'üá™üá∫', 'UAH': 'üá∫üá¶'}
user_state = {}

def save_conversion(conversion):
    filename = 'conversions.json'
    if os.path.exists(filename):
        with open(filename, 'r', encoding='utf-8') as f:
            try:
                conversions = json.load(f)
            except json.JSONDecodeError:
                conversions = []
    else:
        conversions = []

    conversions.append(conversion)
    if len(conversions) > 10:
        conversions.pop(0)

    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(conversions, f, ensure_ascii=False, indent=2)

def safe_remove_keyboard(msg):
    try:
        if getattr(msg, "reply_markup", None):
            bot.edit_message_reply_markup(msg.chat.id, msg.message_id, reply_markup=None)
    except telebot.apihelper.ApiTelegramException as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}")
    except Exception as e:
        print(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}")

@bot.message_handler(commands=['start'])
def welcome(message):
    bot.send_message(message.chat.id, f'üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!')
    show_main_page(message.chat.id)

def show_main_page(chat_id):
    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(telebot.types.InlineKeyboardButton('üí± –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç—ã', callback_data='convert_currency'))
    markup.add(telebot.types.InlineKeyboardButton('üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è', callback_data='show_instruction'))
    bot.send_message(chat_id, 'üìå –≠—Ç–æ –±–æ—Ç-–∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == 'show_instruction')
def instruction(call):
    safe_remove_keyboard(call.message)
    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(telebot.types.InlineKeyboardButton('üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é', callback_data='return_main'))
    text = ('üìå *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:*\n\n'
            '1. –ù–∞–∂–º–∏—Ç–µ "–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç—ã".\n'
            '2. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É.\n'
            '3. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏.\n'
            '4. –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.\n\n'
            '–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!')
    bot.send_message(call.message.chat.id, text, parse_mode='Markdown', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == 'return_main')
def return_main(call):
    safe_remove_keyboard(call.message)
    user_state.pop(call.message.chat.id, None)  # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    show_main_page(call.message.chat.id)

@bot.callback_query_handler(func=lambda call: call.data == 'convert_currency' or call.data == 'continue_convert')
def choose_base_currency(call):
    safe_remove_keyboard(call.message)
    user_state.pop(call.message.chat.id, None)  # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è 
    markup = telebot.types.InlineKeyboardMarkup()
    for curr in CURRENCIES:
        markup.add(telebot.types.InlineKeyboardButton(f'{EMOJI[curr]} {curr}', callback_data=f'base:{curr}'))
    markup.add(telebot.types.InlineKeyboardButton('üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é', callback_data='return_main'))
    bot.send_message(call.message.chat.id, 'üí∞ –í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ö–æ–¥–Ω—É—é –≤–∞–ª—é—Ç—É:', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('base:'))
def set_base_currency(call):
    safe_remove_keyboard(call.message)
    base_currency = call.data.split(':')[1]
    user_state[call.message.chat.id] = {'base': base_currency}
    bot.send_message(call.message.chat.id, f'–í—ã–±—Ä–∞–Ω–∞ –≤–∞–ª—é—Ç–∞ {base_currency}. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:')


@bot.message_handler(func=lambda message: True)
def input_amount(message):
    state = user_state.get(message.chat.id)
    if not state or 'base' not in state:
        bot.send_message(message.chat.id, '‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ö–æ–¥–Ω—É—é –≤–∞–ª—é—Ç—É.')
        return
    try:
        amount = float(message.text.replace(',', '.'))
        if amount <= 0 or math.isnan(amount) or amount > 2147483647:
            raise ValueError
        state['amount'] = amount
        markup = telebot.types.InlineKeyboardMarkup()
        for curr in CURRENCIES:
            if curr != state['base']:
                markup.add(telebot.types.InlineKeyboardButton(f'{EMOJI[curr]} {curr}', callback_data=f'target:{curr}'))
        markup.add(telebot.types.InlineKeyboardButton('üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é', callback_data='return_main'))
        bot.send_message(message.chat.id, 'üîÑ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:', reply_markup=markup)
    except ValueError:
        bot.send_message(message.chat.id, '‚ùóÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É .')




@bot.callback_query_handler(func=lambda call: call.data.startswith('target:'))
def convert(call):
    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
    target_currency = call.data.split(':')[1]
    state = user_state.get(call.message.chat.id)
    try:
        r = requests.get(f'{CURRENCY_API_URL}{state["base"]}')
        r.raise_for_status()
        rate = r.json()['rates'].get(target_currency)
        if not rate:
            raise Exception
        result = state['amount'] * rate
        bot.send_message(call.message.chat.id, f'‚úÖ {state["amount"]:.2f} {state["base"]} = {result:.2f} {target_currency}')
        save_conversion({'from': state['base'], 'to': target_currency, 'amount': state['amount'], 'result': round(result, 2)})
        markup = telebot.types.InlineKeyboardMarkup()
        markup.add(telebot.types.InlineKeyboardButton('üîÅ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data='continue_convert'))
        markup.add(telebot.types.InlineKeyboardButton('üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é', callback_data='return_main'))
        bot.send_message(call.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=markup)
    except Exception:
        bot.send_message(call.message.chat.id, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç.')

if __name__ == '__main__':
    print("Bot is running...")
    bot.polling(none_stop=True)
